<!-- 声明当前文件是一个 Maven 项目描述符（Project Object Model），Maven 会读取它来理解项目结构 -->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <!-- 指定遵循的 POM 版本，4.0.0 是目前 Maven 的主流版本 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 指定公司或组织的域名倒写形式，用于在 Maven 仓库中唯一标识本项目 -->
    <groupId>com.banma</groupId>
    <!-- 在同一个 groupId 下，artifactId 用来区分不同项目或模块 -->
    <artifactId>banma01</artifactId>
    <!-- 标记当前项目的版本号，SNAPSHOT 表示尚在开发中 -->
    <version>1.0-SNAPSHOT</version>
    <!-- 说明最终构建出的包类型为 WAR，适合部署到 Tomcat 这类 Servlet 容器 -->
    <packaging>war</packaging>
    <!-- 写一个易读的项目名称，方便在 IDE 或构建输出中识别 -->
    <name>banma01 Maven Webapp</name>

    <!-- 统一定义整个项目构建时需要的各种属性值 -->
    <properties>
        <!-- 告诉 Maven 使用 UTF-8 解析源码文件，防止中文出现乱码 -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!-- 告诉 Maven 生成报告时也采用 UTF-8 编码，保证输出内容正常显示 -->
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- 指定编译源码时使用的 Java 版本 -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <!-- 指定生成的字节码与哪一个 Java 版本兼容 -->
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!-- 声明项目运行所需要的第三方依赖库 -->
    <dependencies>
        <!-- 提供 Servlet API，编译时需要，运行时由应用服务器提供 -->
        <dependency>
            <!-- 依赖所属的组织或公司 -->
            <groupId>javax.servlet</groupId>
            <!-- 依赖的具体模块名称 -->
            <artifactId>javax.servlet-api</artifactId>
            <!-- 依赖的版本号 -->
            <version>3.0.1</version>
            <!-- provided 表示打包时不包含在 WAR 中，由容器负责提供 -->
            <scope>provided</scope>
        </dependency>

        <!-- 提供 JSP 页面中常用的 JSTL 标签库 -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
        </dependency>

        <!-- 提供连接 MySQL 数据库所需的 JDBC 驱动程序 -->
        <dependency>
            <groupId>com.mysql</groupId>
            <artifactId>mysql-connector-j</artifactId>
            <version>8.0.33</version>
        </dependency>

        <!-- Spring Security Crypto 模块，内含 BCrypt 等密码加密工具 -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-crypto</artifactId>
            <version>5.8.5</version>
        </dependency>

        <!-- 引入 JUnit 4 作为单元测试框架 -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <!-- 测试阶段需要，打包运行时不必包含 -->
            <scope>test</scope>
        </dependency>
    </dependencies>

    <!-- 配置项目的构建过程与需要的插件 -->
    <build>
        <!-- 指定最终生成的 WAR 文件名，默认会附加 .war 扩展名 -->
        <finalName>banma01</finalName>
        <!-- 声明将在构建过程中使用的一组插件 -->
        <plugins>
            <!-- 控制 Java 编译行为的官方插件 -->
            <plugin>
                <!-- 插件提供者的组织标识 -->
                <groupId>org.apache.maven.plugins</groupId>
                <!-- 插件的名称 -->
                <artifactId>maven-compiler-plugin</artifactId>
                <!-- 选择一个较新的插件版本以获得 bug 修复和功能 -->
                <version>3.11.0</version>
                <!-- 对插件进行具体配置 -->
                <configuration>
                    <!-- 使用前面 properties 中声明的 Java 源码级别 -->
                    <source>${maven.compiler.source}</source>
                    <!-- 使用前面 properties 中声明的字节码级别 -->
                    <target>${maven.compiler.target}</target>
                    <!-- 统一编译时的字符编码 -->
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>

            <!-- 控制资源文件复制时编码的官方插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <!-- 保证复制资源（如 JSP、SQL）时仍以 UTF-8 处理 -->
                    <encoding>${project.build.sourceEncoding}</encoding>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
